{
  "name": "mongo-query",
  "version": "0.5.2",
  "dependencies": {
    "debug": "*",
    "type-component": "0.0.1",
    "mongo-eql": "0.1.0",
    "object-component": "0.0.3",
    "dot-component": "0.1.1"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*"
  },
  "component": {
    "scripts": {
      "mongo-query/index.js": "index.js",
      "mongo-query/mods.js": "mods.js",
      "mongo-query/filter.js": "filter.js",
      "mongo-query/ops.js": "ops.js"
    }
  },
  "readme": "\n# mongo-query\n\nComponent that implements the complete MongoDB query JSON API to operate\non individual documents.\n\n## Example\n\n```js\nvar query = require('mongo-query');\n\n// our sample document\nvar obj = {\n  name: 'Tobi',\n  age: 8,\n  location: { country: 'Canada', zip: 123 }\n  likes: [{ id: 1, name: 'Food' }, { id: 2, name: 'Stuff' }]\n};\n\n// run an operation and get changes\nvar changes = query(obj, { $set: { 'location.country': 'US' } });\n```\n\n## Features\n\n- Transactional. If an op fails, the others are rolled back.\n- Precise modification logs. Ops return an array of `change` objects.\n  - Noops are excluded.\n  - Before/after values are provided.\n  - Whether the op triggered the creation of a new array.\n- Error messages almost exactly match MongoDB's.\n- Query support. Allows for support of the positional operator.\n- Wide test coverage.\n\n## API\n\n### query(obj, filter, modifier, opts)\n\n  - Executes the `modifier` on `obj` provided they match `filter`.\n  - Returns an array of change objects (see below). If the modifier does\n  not alter the object the array will be empty.\n  - Options:\n    - `strict` if true, only modifies if `filter` has a match (`false`).\n\n### query.filter(query)\n\n  Returns a `Query` object to perform tests on.\n\n  Example: `query.filter({ a: { $gt: 3 } }).test({ a: 1 })`. For the\n  complete filter API refer to\n  [filtr](https://github.com/logicalparadox/filtr/).\n\n### query.get(obj, key)\n\n  Gets the `key` from the given `obj`, which can use [dot\n  notation](http://www.mongodb.org/display/DOCS/Dot+Notation+\\(Reaching+into+Objects\\)).\n\n  Example: `query.get(obj, 'some.key')`.\n\n### query.set(obj, key, val)\n\n  Sets the `key` on `obj` with the given `val`. Key can use [dot\n  notation](http://www.mongodb.org/display/DOCS/Dot+Notation+\\(Reaching+into+Objects\\)).\n\n### change\n\n  All change objects contain:\n  - `key`: the key that was affected. If the positional operator was used,\n    the key is rewritten with dot notation (eg: `comments.3.date`).\n  - `op`: the type of operation that was performed\n\n  Depending on the type of operation they can contain extra fields.\n\n#### $set\n\n  - `value` that we set\n\n#### $inc\n\n  - `value` value that we increment by\n\n#### $pop\n\n  - `value` value that was popped\n  - `shift` if true, it was a shift instead of a pop\n\n#### $rename\n\n  - `value` new name\n\n#### $push\n\n  - `value` value that was pushed\n\n#### $pushAll\n\n  - `value` array of values that were pushed\n\n#### $pull\n\n  - `value` array of values that were pulled\n\n#### $pullAll\n\n  - `value` array of values that were pulled\n\n#### $unset\n\n  - `value` (`undefined`)\n\n#### $addToSet\n\n  - `value` array of values that were added\n",
  "readmeFilename": "README.md",
  "description": "Component that implements the complete MongoDB query JSON API to operate on individual documents.",
  "_id": "mongo-query@0.5.2",
  "dist": {
    "shasum": "bed50197720fd623897d30bdf2ae48ddf6d3b2b8"
  },
  "_from": "mongo-query@",
  "_resolved": "https://registry.npmjs.org/mongo-query/-/mongo-query-0.5.2.tgz"
}
